var doc;var originalFile;var tmpDoc;var allArtboards = [];var allObjects = [];var svgPrefix;      var svgBasePath;    var dialog;/***************************************** *  * This script creates a new document for * each object in the document and saves  * each individual document to SVG. * *****************************************/ function main() {        try {                init();        showExportDialog();                } catch (err) {         Window.alert (err);         return "Error: " + err;    }     return "Success";}function init() {        if ( app.documents.length > 0 ) {       doc = app.activeDocument;       originalFile = doc.fullName;       log("Active document: " + originalFile);    } else {       throw("You must open at least one document.");    }    if(!doc.saved) {        doc.save();    }        getAllArtboards();    getAllObjects();}function getAllArtboards() {    allArtboards = doc.artboards;    log("Document has " + allArtboards.length + " artboards.");}function getAllObjects() {        for(var i = 0; i < allArtboards.length; i++) {                var currentArtboard = allArtboards[i];        allArtboards.setActiveArtboardIndex(i);        doc.selectObjectsOnActiveArtboard();                var artboardObjects = doc.selection;                // Carry over the artboard name        if( artboardObjects.length == 1 ) {            artboardObjects[0].name = currentArtboard.name;        }            log("Found " + artboardObjects.length + " object" + (artboardObjects.length == 1 ? "s" : "") + " on artboard \"" + currentArtboard.name + "\"");                allObjects = allObjects.concat(artboardObjects);                doc.selection = null;    }    if( allObjects.length > 0 ) {        log("Found a total of " + allObjects.length + " objects in the document");            } else {                throw("No objects found in document");    }}function createTempDoc() {        var tmpDocPreset = new DocumentPreset();    tmpDocPreset.width = 10;    tmpDocPreset.height = 10;    tmpDocPreset.colorMode = doc.documentColorSpace;    tmpDocPreset.title = "~tmp";        tmpDoc = app.documents.addDocument ("Web", tmpDocPreset, false);    tmpDoc.activeView.zoom = 1;    app.activeDocument = doc;}function showExportDialog() {    // Export dialog    dialog = new Window('dialog', 'Export Objects as SVG');     dialog.msgPnl = dialog.add('panel', undefined, 'Export Objects as SVG');     var prefixGroup = dialog.msgPnl.add('group', undefined, '')    prefixGroup.orientation = 'row';    prefixGroup.alignment = [ScriptUI.Alignment.LEFT, ScriptUI.Alignment.TOP]    var prefixLabel = prefixGroup.add('statictext', undefined, 'File prefix:');     prefixLabel.size = [100,20]    var prefixInputField = prefixGroup.add('edittext', undefined, svgPrefix);     prefixInputField.size = [ 300,20 ];    var directoryGroup = dialog.msgPnl.add( 'group', undefined, '')     directoryGroup.orientation = 'row'    directoryGroup.alignment = [ScriptUI.Alignment.LEFT, ScriptUI.Alignment.TOP]    var directoryLabel = directoryGroup.add('statictext', undefined, 'Output directory:');     directoryLabel.size = [ 100,20 ];    var directoryInputField = directoryGroup.add('edittext', undefined, svgBasePath);     directoryInputField.size = [ 300,20 ];    dialog.progressBar = dialog.msgPnl.add( 'progressbar', undefined, 0, 100 );    dialog.progressBar.size = [400,10]    dialog.progressBarLabel = dialog.msgPnl.add('statictext', undefined, 'Will export ' + allObjects.length + ' objects in this document' );     dialog.progressBarLabel.size = [ 400,20 ];    var chooseButton = directoryGroup.add('button', undefined, 'Choose ...' );    chooseButton.onClick = function() { svgBasePath = Folder.selectDialog(); directoryInputField.text = svgBasePath }    dialog.buttonPanel = dialog.add('group', undefined, '');     dialog.buttonPanel.orientation = 'row'    dialog.buttonPanel.cancelBtn = dialog.buttonPanel.add('button', undefined, 'Cancel', {name:'cancel'});    dialog.buttonPanel.cancelBtn.onClick = function() { dialog.close() };    dialog.buttonPanel.okBtn = dialog.buttonPanel.add('button', undefined, 'Export', {name:'ok'});    dialog.buttonPanel.okBtn.onClick = function() { svgPrefix = prefixInputField.text; runExport(); };    dialog.show();} function runExport() {         var num_exported = 0;    var num_to_export = allObjects.length;        createTempDoc();        for (var i = 0; i < allObjects.length; i++) {                 var tmpLayer;                var currentObject = allObjects[i];        var name = (currentObject.name == "") ? "icon_" + i : currentObject.name;                 log("Exporting " + name);                app.activeDocument = doc;        currentObject.selected = true;        app.copy();        currentObject.selected = false;                app.activeDocument = tmpDoc;        tmpLayer = tmpDoc.layers.add();        tmpLayer.name = name;         tmpDoc.activeLayer = tmpLayer;                app.paste();        tmpDoc.fitArtboardToSelectedArt(0);        tmpDoc.activeLayer.hasSelectedArtwork = false;         var filename = svgBasePath +"/";        if( svgPrefix != "" )            filename = filename + svgPrefix + "_";               filename = filename + name + ".svg";                var destFile = new File(filename);                  if(tmpDoc.layers.length > 1)            tmpDoc.layers[1].remove();                tmpDoc.exportFile (destFile, ExportType.SVG, new ExportOptionsSVG());                num_exported++;                dialog.progressBarLabel.text = 'Exported ' + num_exported + ' of ' + num_to_export;        dialog.progressBar.value = num_exported / num_to_export * 100;        dialog.update();    }        tmpDoc.close(SaveOptions.DONOTSAVECHANGES);    doc.save();    dialog.close();}function log(msg) {    $.writeln(msg);}main();